{"version":3,"sources":["constants.js","Hooks/useQuery.ts","Components/Header/Header.tsx","Components/Body/Sidepanel/SideHeader/SideHeader.tsx","Components/Body/Sidepanel/ChatOption/ChatOption.tsx","Components/Body/Sidepanel/Channels/Channels.tsx","Components/Body/Sidepanel/FriendList/FriendList.tsx","Components/Body/Sidepanel/Sidepanel.tsx","Components/Body/ChatArea/ChatBody/Message/Message.tsx","Components/Body/ChatArea/ChatBody/ChatBody.tsx","Hooks/useMutation.ts","Components/Util/mutationCallback.js","Components/Util/createOptions.js","Components/Body/ChatArea/MessageBox/MessageBox.tsx","Components/Body/ChatArea/ChatHeader/ChatHeader.tsx","Components/Body/ChatArea/NewMemberForm/NewMemberForm.tsx","Hooks/useModal.ts","Components/Body/ChatArea/ChatArea.tsx","Components/Body/NewChannelForm/NewChannelForm.tsx","Components/Body/Body.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ROOT_URL","MESSAGE_FILE","USER_FILE","CHAT_FILE","BASE_URL","require","useQuery","param","url","method","payload","skip","interval","useState","data","setData","error","setError","loading","setLoading","queryCount","setQueryCount","fetchCallback","useCallback","options","Object","assign","body","JSON","stringify","headers","fetch","then","res","ok","json","catch","err","useEffect","queryTimer","setInterval","Date","now","clearInterval","Header","user","useContext","UserContext","className","placeholder","type","name","src","avatar","alt","SideHeader","React","memo","ChatOption","chatId","handleSelectedChatId","onClick","id","handleSelection","Channels","channels","SelectedChannel","handleSelectedChannelId","handleFormOpen","map","channel","indx","FriendList","friends","SelectedFriend","handleSelectedFriendId","friend","Sidepanel","selectedListItem","handleSelectedListItem","directMessages","Message","sender","message","chat","chatLoading","senderId","userLoading","content","ChatBody","messages","onScroll","console","log","useMutation","mutationFunction","mutate","a","mutationCallback","createOptions","MessageBox","activeChatId","newMessage","setNewMessage","mutateMessage","mutateChat","value","onChange","e","target","disabled","uniqueMessageId","toString","timeStamp","messageId","ChatHeader","activeChat","NewMemberForm","isFormOpen","handleFormClose","setUser","mutateUser","required","newMemberPayload","userId","useModal","isModalOpen","setIsModalOpen","toggleModalState","prevModalState","ChatArea","messageList","setMessageList","prevMessages","length","newMessages","reverse","prevMessagesList","isNewMemberFormOpen","toggleNewMemberForm","handleScroll","currentTarget","scrollTop","NewChannelForm","isOpen","onClose","chatName","setChatName","users","setUsers","handleChatName","handleUsers","userList","split","newChatId","chatPayload","forEach","userPayload","Body","selectedChatId","setSelectedChatId","isNewChannelFormOpen","toggleNewChannelForm","process","PWD","prompt","createContext","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e506dcbf.chunk.js","sourcesContent":["const ROOT_URL =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:3131/\"\n    : \"https://chat-server-dummy-app.herokuapp.com/\";\nconst MESSAGE_FILE =\n  \"/Users/rahul/Desktop/Practice/dummy-chat/src/Server/message.json\";\nconst USER_FILE =\n  \"/Users/rahul/Desktop/Practice/dummy-chat/src/Server/user.json\";\nconst CHAT_FILE =\n  \"/Users/rahul/Desktop/Practice/dummy-chat/src/Server/chat.json\";\nconst BASE_URL = \"http://localhost:3001\";\nmodule.exports = { ROOT_URL, MESSAGE_FILE, USER_FILE, CHAT_FILE, BASE_URL };\n","import { useState, useEffect, useCallback } from \"react\";\nconst { ROOT_URL } = require(\"../constants\");\n\ntype queryParam = {\n  url: string;\n  method: string;\n  payload?: Object;\n  interval?: boolean;\n  skip?: boolean;\n};\n\nconst useQuery = <T>(param: queryParam) => {\n  const { url, method, payload, skip = false, interval } = param;\n\n  const [data, setData] = useState<T | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [loading, setLoading] = useState(!skip);\n  const [queryCount, setQueryCount] = useState(0);\n\n  const fetchCallback = useCallback(() => {\n    const options = { method };\n    if (payload) {\n      Object.assign(options, {\n        body: JSON.stringify(payload),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n    }\n    setLoading(true);\n    fetch(ROOT_URL + url, options)\n      .then((res) => {\n        if (!res.ok) {\n          setError(\"Some Error\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setError(`${err}`);\n      });\n  }, [url, method, payload]);\n\n  useEffect(() => {\n    if (!skip) {\n      fetchCallback();\n    }\n  }, [fetchCallback, skip, queryCount]);\n\n  useEffect(() => {\n    if (!interval) {\n      return () => {};\n    } else {\n      const queryTimer = setInterval(() => {\n        setQueryCount(Date.now());\n      }, 500);\n      return () => {\n        clearInterval(queryTimer);\n      };\n    }\n  });\n\n  return { data, error, loading, fetchCallback };\n};\n\nexport { useQuery };\n","import React, { useContext } from \"react\";\nimport { UserContext } from \"../../App\";\nimport { useQuery } from \"../../Hooks/useQuery\";\nimport \"./Header.css\";\n\ninterface userSubscriptions {\n  id: string;\n  name: string;\n  directMessages: string[];\n  channels: string[];\n  avatar: string;\n}\nfunction Header() {\n  const user = useContext(UserContext);\n  const { data, loading } = useQuery<userSubscriptions>({\n    url: `user/id?userId=${user}`,\n    method: \"GET\",\n  });\n  return (\n    <div className=\"header-container\">\n      <input className=\"search-box\" placeholder=\"Search...\" type=\"text\" />\n\n      <div className=\"user\">\n        {loading ? (\n          <>\n            <div className=\"user-name\"> User_Name </div>\n            <div className=\"loading-user-avatar\"> </div>\n          </>\n        ) : (\n          <>\n            <div className=\"user-name\"> {data?.name} </div>\n            <img className=\"user-avatar\" src={data?.avatar} alt=\"AVATAR\" />\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport { Header };\n","import React from 'react'\nimport \"./SideHeader.css\"\n\nconst ORG_NAME = \"Sprinklr\";\nconst SideHeader = React.memo(() => {\n    return (\n        <div className=\"side-header-container\">\n            {ORG_NAME}\n        </div>\n    )\n});\n\nexport default SideHeader\n","import React from \"react\";\nimport { useQuery } from \"../../../../Hooks/useQuery\";\nimport \"./ChatOption.css\";\n\ninterface chatOptionProps {\n  chatId: string;\n  handleSelectedChatId: (chatId: string) => void;\n}\ntype chatInformation = {\n  id: string;\n  name: string;\n  userId: string[];\n  messages: string[];\n  type: string;\n};\nconst ChatOption = React.memo(({ chatId, handleSelectedChatId }: chatOptionProps) => {\n  const { data, loading } = useQuery<chatInformation>({\n    url: `chat/id?chatId=${chatId}`,\n    method: \"GET\",\n  });\n  const handleSelection = (data: chatInformation | undefined): void => {\n    if (data) {\n      handleSelectedChatId(data.id);\n    }\n  };\n  return (\n    <>\n      {loading ? (\n        <div> Loading... </div>\n      ) : (\n        <div\n          className=\"chat-option-container\"\n          onClick={() => handleSelection(data)}\n        >\n          {data?.name}\n        </div>\n      )}\n    </>\n  );\n});\n\nexport { ChatOption };\n","import React from \"react\";\nimport { ChatOption } from \"../ChatOption/ChatOption\";\nimport \"./Channels.css\";\n\ninterface channelProps {\n  channels: string[] | undefined;\n  SelectedChannel: string;\n  handleSelectedChannelId: (chatId: string) => void;\n  handleFormOpen: () => void;\n}\n\nconst Channels = React.memo(({\n  channels,\n  SelectedChannel,\n  handleSelectedChannelId,\n  handleFormOpen\n}: channelProps) => {\n  return (\n    <div className=\"channel-container\">\n      <b>Channels</b>\n      {channels?.map((channel, indx) => (\n        <div key={indx} className=\"channel\" data-selected={SelectedChannel === channel}>\n          <ChatOption\n            chatId={channel}\n            handleSelectedChatId={handleSelectedChannelId}\n          />\n        </div>\n      ))}\n      <div className=\"channel-button\" onClick={handleFormOpen} > Add channels </div>\n    </div>\n  );\n});\n\nexport {Channels};\n","import React from \"react\";\nimport { ChatOption } from \"../ChatOption/ChatOption\";\nimport \"./FriendList.css\";\n\ninterface friendListPros {\n  friends: string[] | undefined;\n  SelectedFriend: string;\n  handleSelectedFriendId: (chatId: string) => void;\n}\n\nconst FriendList = React.memo(({\n  friends,\n  SelectedFriend,\n  handleSelectedFriendId\n}: friendListPros) => {\n  return (\n    <div className=\"friend-container\">\n      <b>Direct Messages</b>\n      {friends?.map((friend, indx) => (\n        <div key={indx} className=\"friend\" data-selected={SelectedFriend === friend}>\n          <ChatOption\n            chatId={friend}\n            handleSelectedChatId={handleSelectedFriendId}\n          />\n        </div>\n      ))}\n    </div>\n  );\n});\n\nexport {FriendList};\n","import React, { useContext } from \"react\";\nimport SideHeader from \"./SideHeader/SideHeader\";\nimport {Channels} from \"./Channels/Channels\";\nimport {FriendList} from \"./FriendList/FriendList\";\nimport { useQuery } from \"../../../Hooks/useQuery\";\nimport { UserContext } from \"../../../App\";\nimport \"./Sidepanel.css\";\n\ninterface sidePanelProps {\n  selectedListItem: string;\n  handleSelectedListItem: (chatId: string) => void;\n  handleFormOpen: () => void;\n}\ninterface userSubscriptions {\n  id: string;\n  name: string;\n  directMessages: string[];\n  channels: string[];\n  avatar: string;\n}\nfunction Sidepanel({\n  selectedListItem,\n  handleSelectedListItem,\n  handleFormOpen\n}: sidePanelProps) {\n  const user = useContext(UserContext);\n  const { data } = useQuery<userSubscriptions>({\n    url: `user/id?userId=${user}`,\n    method: \"GET\",\n    interval: true,\n  });\n  return (\n    <div className=\"sidepanel-container\">\n      <SideHeader />\n      <Channels\n        SelectedChannel={selectedListItem}\n        channels={data?.channels}\n        handleSelectedChannelId={handleSelectedListItem}\n        handleFormOpen={handleFormOpen}\n      />\n      <FriendList\n        SelectedFriend={selectedListItem}\n        friends={data?.directMessages}\n        handleSelectedFriendId={handleSelectedListItem}\n      />\n    </div>\n  );\n}\n\nexport { Sidepanel };\n","import React from \"react\";\nimport { useQuery } from \"../../../../../Hooks/useQuery\";\nimport \"./Message.css\";\n\ninterface messageProps {\n  sender: string | null;\n  message: string;\n}\ntype messageInformation = {\n  id: string;\n  senderId: string;\n  content: string;\n  timeStamp: string;\n};\ntype userInformation = {\n  id: string;\n  name: string;\n  channels: string[];\n  directMessages: string[];\n  avatar: string;\n};\nconst Message = React.memo(({ sender, message }: messageProps) => {\n  const { data: chat, loading: chatLoading } = useQuery<messageInformation>({\n    url: `message/id?messageId=${message}`,\n    method: \"GET\",\n  });\n  const { data: user, loading: userLoading } = useQuery<userInformation>({\n    url: `user/id?userId=${chat?.senderId}`,\n    method: \"GET\",\n  });\n  return (\n    <div className=\"message-container\">\n      <div className=\"message\" data-sender={sender === chat?.senderId}>\n        <div>\n          {userLoading ? (\n            <div className=\"loading-avatar\"></div>\n          ) : (\n            <img className=\"message-avatar\" src={user?.avatar} alt=\"avatar\" />\n          )}\n        </div>\n        <div className=\"message-content-container\">\n          {userLoading ? (\n            <div className=\"sender-name-loading\"> </div>\n          ) : (\n            <div className=\"sender-name\">{user?.name} :</div>\n          )}\n          {chatLoading ? (\n            <div className=\"message-content-loading\"></div>\n          ) : (\n            <div className=\"message-content\">{chat?.content}</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport { Message };\n","import React from \"react\";\nimport { Message } from \"./Message/Message\";\nimport \"./ChatBody.css\";\n\ninterface messageBodyProps {\n  sender: string | null;\n  messages: string[] | undefined;\n  onScroll: (e: React.UIEvent<HTMLDivElement>) => void;\n}\n\n\nconst ChatBody = React.memo(({ sender, messages, onScroll }: messageBodyProps) => {\n  return (\n    <div className=\"chat-body-container\" onScroll={onScroll}>\n      { console.log(messages)}\n      {messages &&\n        messages.map((message) => {\n          return <Message sender={sender} key={message} message={message} />;\n        })}\n    </div>\n  );\n});\n\nexport { ChatBody };\n","import { useState } from \"react\";\ntype functionType = (...args: any[]) => Promise<Response>;\n\nconst useMutation = <T>(mutationFunction: functionType) => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<T | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const mutate = async (data: any) => {\n    setLoading(true);\n    mutationFunction(data)\n      .then((res) => {\n        if (!res.ok) {\n          setError(\"Some Error\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setError(`${err}`);\n      });\n  };\n\n  return { mutate, data, loading, error };\n};\n\nexport { useMutation };\n","import { createOptions } from \"./createOptions\";\n\nconst mutationCallback = (data, url) => {\n    const options = createOptions(data);\n    return fetch(url, options);\n}\n\nexport { mutationCallback };","const createOptions = (data) => {\n    const options = {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    return options;\n}\n\nexport { createOptions };","import React, { useState } from \"react\";\nimport { useMutation } from \"../../../../Hooks/useMutation\";\nimport { mutationCallback } from \"../../../Util/mutationCallback\";\nimport \"./MessageBox.css\";\n\nconst { ROOT_URL } = require(\"../../../../constants\");\n\ninterface MessageBoxProps {\n  sender: string | null;\n  activeChatId: string;\n}\n\ntype messageInformation = {\n  id: string;\n  senderId: string;\n  content: string;\n  timeStamp: string;\n};\n\ntype chatInformation = {\n  id: string;\n  name: string;\n  userId: string[];\n  messages: string[];\n  type: string;\n};\n\nconst MessageBox = React.memo(({ sender, activeChatId }: MessageBoxProps) => {\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const { mutate: mutateMessage } = useMutation<messageInformation>((data) => {\n    const url = `${ROOT_URL}message`;\n    return mutationCallback(data, url);\n  });\n\n  const { mutate: mutateChat } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}chat/id`;\n    return mutationCallback(data, url);\n  });\n\n  const handleNewMessage = (\n    e: React.ChangeEvent<HTMLTextAreaElement>\n  ): void => {\n    const { value } = e.target;\n    setNewMessage(value);\n  };\n\n  const handleMessageSend = (): void => {\n    const uniqueMessageId = Date.now().toString();\n    const messagePayload = {\n      id: uniqueMessageId,\n      senderId: sender,\n      content: newMessage,\n      timeStamp: uniqueMessageId,\n    };\n    mutateMessage(messagePayload);\n\n    const chatPayload = {\n      chatId: activeChatId,\n      messageId: uniqueMessageId,\n    };\n    mutateChat(chatPayload);\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"messageBox-container\">\n      <textarea\n        className=\"messageBox-input\"\n        placeholder=\"Type Message...\"\n        value={newMessage}\n        onChange={handleNewMessage}\n      />\n      <button\n        disabled={newMessage === \"\"}\n        className=\"message-box-button\"\n        onClick={handleMessageSend}\n      >\n        Send\n      </button>\n    </div>\n  );\n});\n\nexport { MessageBox };","import React from \"react\";\nimport \"./ChatHeader.css\";\n\ninterface ChatHeaderProps {\n  activeChat: string | undefined;\n  type: string | undefined;\n  handleFormOpen: () => void;\n}\nconst ChatHeader = React.memo(\n  ({ activeChat, type, handleFormOpen }: ChatHeaderProps) => {\n    return (\n      <div className=\"chat-header-container\">\n        {activeChat}\n        {type === \"2\" && (\n          <button className=\"add-channel-button\" onClick={handleFormOpen}>\n            +\n          </button>\n        )}\n      </div>\n    );\n  }\n);\n\nexport { ChatHeader };\n","import React, { useState } from \"react\";\nimport { ROOT_URL } from \"../../../../constants\";\nimport { useMutation } from \"../../../../Hooks/useMutation\";\nimport { mutationCallback } from \"../../../Util/mutationCallback\";\n\ninterface newMemberFormProp {\n  isFormOpen: boolean;\n  chatId: string;\n  handleFormClose: () => void;\n}\n\ntype chatInformation = {\n  id: string;\n  name: string;\n  userID: string[];\n  messages: string[];\n  type: string;\n};\n\nconst NewMemberForm = React.memo(({\n  isFormOpen,\n  chatId,\n  handleFormClose,\n}: newMemberFormProp) => {\n  const [user, setUser] = useState(\"\");\n  const { mutate: mutateChat } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}chat/newUser`;\n    return mutationCallback(data, url);\n  });\n  const { mutate: mutateUser } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}user`;\n    return mutationCallback(data, url);\n  });\n  const handleUsers = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setUser(value);\n  };\n  const addNewMember = () => {\n    handleFormClose();\n    const newMemberPayload = {\n      chatId: chatId,\n      userId: user,\n    };\n    mutateChat(newMemberPayload);\n    mutateUser(newMemberPayload);\n  };\n\n  return (\n    <>\n      {isFormOpen && (\n        <div className=\"overlay\">\n          <div className=\"form\">\n            <h2>Add new member!</h2>\n            <label className=\"form-label\"> New Member </label>\n            <input\n              className=\"form-input\"\n              value={user}\n              placeholder=\"New Member\"\n              onChange={handleUsers}\n              required\n            />\n            <button className=\"form-button-close\" onClick={handleFormClose}>\n              X\n            </button>\n            <button className=\"form-button-create\" onClick={addNewMember}>\n              Add\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n});\n\nexport { NewMemberForm };\n","import { useState, useCallback } from 'react';\n\nconst useModal = () => {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const toggleModalState = useCallback(() => {\n        setIsModalOpen(prevModalState => !prevModalState);\n    }, []);\n    return { isModalOpen, toggleModalState };\n}\nexport { useModal };","import React, { useContext, useState, useEffect } from \"react\";\nimport { ChatBody } from \"./ChatBody/ChatBody\";\nimport { MessageBox } from \"./MessageBox/MessageBox\";\nimport { ChatHeader } from \"./ChatHeader/ChatHeader\";\nimport { useQuery } from \"../../../Hooks/useQuery\";\nimport { UserContext } from \"../../../App\";\nimport { NewMemberForm } from \"./NewMemberForm/NewMemberForm\";\nimport { useModal } from \"../../../Hooks/useModal\";\nimport \"./ChatArea.css\";\n\ninterface chatAreaProps {\n  activeChatId: string;\n}\n\ntype chatInformation = {\n  id: string;\n  name: string;\n  userId: string[];\n  messages: string[];\n  type: string;\n};\n\nconst ChatArea = ({ activeChatId }: chatAreaProps) => {\n  const sender = useContext(UserContext);\n  const [messageList, setMessageList] = useState<string[]>([]);\n  \n  const { data } = useQuery<chatInformation>({\n    url: `chat/id?chatId=${activeChatId}`,\n    method: \"GET\",\n  });\n\n  const { data: prevMessages } = useQuery<string[]>({\n    url: `chat/page?chatId=${activeChatId}&lastMessage=${\n      messageList.length ? messageList[messageList.length - 1] : 0\n    }`,\n    method: \"GET\",\n    skip: false\n  });\n\n  const { data: newMessages} = useQuery<string[]>({\n    url: `chat/chatAfter?chatId=${activeChatId}&lastMessage=${\n      messageList?.length ? messageList[0] : -1\n    }`,\n    method: \"GET\",\n    skip: false,\n    interval: true\n  });\n\n  useEffect(() => {\n    const messages = data?.messages ? [...data?.messages] : [];\n    messages.reverse();\n    setMessageList(messages);\n  }, [data]);\n\n  useEffect(() => {\n    if (!newMessages) {\n      return;\n    }\n    console.log(\"here\");\n    setMessageList(prevMessagesList => [...newMessages, ...prevMessagesList]);\n  }, [newMessages]);\n\n  const {\n    isModalOpen: isNewMemberFormOpen,\n    toggleModalState: toggleNewMemberForm,\n  } = useModal();\n\n\n  const handleScroll = async (e: React.UIEvent<HTMLDivElement>) => {\n    if (e.currentTarget.scrollTop === 0) {\n      const messages = prevMessages ? [...prevMessages] : [];\n      messages.reverse();\n      setMessageList(prevMessagesList => [...prevMessagesList, ...messages]);\n    }\n  };\n\n  return (\n    <div className=\"chat-area\">\n      <ChatHeader\n        activeChat={data?.name}\n        type={data?.type}\n        handleFormOpen={toggleNewMemberForm}\n      />\n      <ChatBody\n        sender={sender}\n        messages={messageList}\n        onScroll={handleScroll}\n      />\n\n      <MessageBox sender={sender} activeChatId={activeChatId} />\n\n      <NewMemberForm\n        chatId={activeChatId}\n        isFormOpen={isNewMemberFormOpen}\n        handleFormClose={toggleNewMemberForm}\n      />\n    </div>\n  );\n};\n\nexport { ChatArea };\n","import React, { useState } from \"react\";\nimport { ROOT_URL } from \"../../../constants\";\nimport { useMutation } from \"../../../Hooks/useMutation\";\nimport { mutationCallback } from \"../../Util/mutationCallback\";\nimport \"./NewChannelForm.css\";\n\ntype newChannelFormProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype chatInformation = {\n  id: string;\n  name: string;\n  userID: string[];\n  messages: string[];\n  type: string;\n};\n\nconst NewChannelForm = React.memo(({ isOpen, onClose}: newChannelFormProps) => {\n  const [chatName, setChatName] = useState(\"\");\n  const [users, setUsers] = useState(\"\");\n\n  const { mutate: mutateChat } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}chat/new`;\n    return mutationCallback(data, url);\n  });\n\n  const { mutate: mutateUser } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}user`;\n    return mutationCallback(data, url);\n  });\n\n  const handleChatName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setChatName(value);\n  };\n\n  const handleUsers = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setUsers(value);\n  };\n\n  const createNewChannel = () => {\n    onClose();\n    const userList = users.split(\",\");\n    const newChatId = Date.now().toString();\n    const chatPayload = {\n      id: newChatId,\n      name: chatName,\n      userId: userList,\n      messages: [],\n      type: \"2\",\n    };\n    userList.forEach((user) => {\n      const userPayload = {\n        chatId: newChatId,\n        userId: user,\n      };\n      console.log(userPayload);\n      mutateUser(userPayload);\n    });\n    mutateChat(chatPayload);\n  }\n  return (\n    <>\n      {!isOpen ? null : (\n        <div className=\"overlay\">\n          <div className=\"form\">\n            <h2>Create a channel</h2>\n            <label className=\"form-label\"> Name </label>\n            <input\n              className=\"form-input\"\n              placeholder=\"Channel-Name\"\n              value={chatName}\n              onChange={ (e) => handleChatName(e)}\n              name=\"name\"\n              required\n            />\n            <label className=\"form-label\"> Members </label>\n            <input\n              className=\"form-input\"\n              placeholder=\"Members-List\"\n              value={users}\n              onChange={(e) => handleUsers(e)}\n              required\n            />\n            <button className=\"form-button-close\" onClick={onClose}>\n              X\n            </button>\n            <button\n              className=\"form-button-create\"\n              onClick={createNewChannel}\n            >\n              Create\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n})\n\nexport { NewChannelForm };\n","import React, { useState, useCallback } from \"react\";\nimport { Sidepanel } from \"./Sidepanel/Sidepanel\";\nimport { ChatArea } from \"./ChatArea/ChatArea\";\nimport { NewChannelForm } from \"./NewChannelForm/NewChannelForm\";\nimport { useModal } from \"../../Hooks/useModal\";\nimport \"./Body.css\";\n\nconst Body = React.memo(() => {\n  const [selectedChatId, setSelectedChatId] = useState(\"\");\n  const {\n    isModalOpen: isNewChannelFormOpen,\n    toggleModalState: toggleNewChannelForm,\n  } = useModal();\n\n  const handleSelectedChatId = useCallback((activeChatId: string): void => {\n    setSelectedChatId(activeChatId);\n  }, []);\n\n  return (\n    <div className=\"body-container\">\n      { console.log(process.env.NODE_ENV, process.env.PWD)}\n      <Sidepanel\n        selectedListItem={selectedChatId}\n        handleSelectedListItem={handleSelectedChatId}\n        handleFormOpen={toggleNewChannelForm}\n      />\n      <ChatArea activeChatId={selectedChatId} />\n      <NewChannelForm isOpen={isNewChannelFormOpen} onClose={toggleNewChannelForm} />\n    </div>\n  );\n})\n\nexport { Body };\n","import React from \"react\";\nimport { Header } from \"./Components/Header/Header\";\nimport { Body } from \"./Components/Body/Body\";\n\nconst user = prompt(\"Enter name to join\");\nconst UserContext = React.createContext<string | null>(\"\");\n\nfunction App() {\n  return (\n    <UserContext.Provider value={user}>\n      <Header />\n      <Body />\n    </UserContext.Provider>\n  );\n}\n\nexport { App, UserContext };\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}