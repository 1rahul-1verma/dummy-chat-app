{"version":3,"sources":["constants.js","Hooks/useQuery.ts","Components/Header/Header.tsx","Components/Body/Sidepanel/SideHeader/SideHeader.tsx","Components/Body/Sidepanel/ChatOption/ChatOption.tsx","Components/Body/Sidepanel/Channels/Channels.tsx","Components/Body/Sidepanel/FriendList/FriendList.tsx","Components/Body/Sidepanel/Sidepanel.tsx","Components/Body/ChatArea/ChatBody/Message/Message.tsx","Components/Body/ChatArea/ChatBody/ChatBody.tsx","Hooks/useMutation.ts","Components/Util/mutationCallback.js","Components/Util/createOptions.js","Components/Body/ChatArea/MessageBox/MessageBox.tsx","Components/Body/ChatArea/ChatHeader/ChatHeader.tsx","Components/Body/ChatArea/NewMemberForm/NewMemberForm.tsx","Hooks/useModal.ts","Components/Body/ChatArea/ChatArea.tsx","Components/Body/NewChannelForm/NewChannelForm.tsx","Components/Body/Body.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ROOT_URL","MESSAGE_FILE","USER_FILE","CHAT_FILE","BASE_URL","require","useQuery","param","url","method","payload","skip","interval","useState","data","setData","error","setError","loading","setLoading","queryCount","setQueryCount","useEffect","options","Object","assign","body","JSON","stringify","headers","fetch","then","res","ok","json","catch","err","queryTimer","setInterval","Date","now","clearInterval","Header","user","useContext","UserContext","className","placeholder","type","name","src","avatar","alt","SideHeader","ChatOption","chatId","handleSelectedChatId","onClick","id","handleSelection","Channels","channels","SelectedChannel","handleSelectedChannelId","handleFormOpen","map","channel","indx","FriendList","friends","SelectedFriend","handleSelectedFriendId","friend","Sidepanel","selectedListItem","handleSelectedListItem","directMessages","Message","sender","message","senderId","content","ChatBody","messages","Row","useCallback","index","style","undefined","height","width","itemSize","itemCount","length","useMutation","mutationFunction","mutate","a","mutationCallback","createOptions","MessageBox","activeChatId","newMessage","setNewMessage","mutateMessage","mutateChat","value","onChange","e","target","disabled","uniqueMessageId","toString","messagePayload","timeStamp","messageId","ChatHeader","activeChat","NewMemberForm","isFormOpen","handleFormClose","setUser","mutateUser","required","newMemberPayload","userId","useModal","isModalOpen","setIsModalOpen","toggleModalState","prevModalState","ChatArea","isNewMemberFormOpen","toggleNewMemberForm","messageList","reverse","NewChannelForm","isOpen","onClose","chatName","setChatName","users","setUsers","handleChatName","handleUsers","userList","split","newChatId","chatPayload","forEach","userPayload","console","log","Body","selectedChatId","setSelectedChatId","isNewChannelFormOpen","toggleNewChannelForm","prompt","React","createContext","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wFAOAA,EAAOC,QAAU,CAAEC,SAPF,yBAOYC,aAL3B,mEAKyCC,UAHvC,gEAGkDC,UAFpC,gEAE+CC,SADhD,0B,iWCLVJ,EAAYK,EAAQ,GAApBL,SAUDM,EAAW,SAAIC,GACnB,IAAQC,EAAiDD,EAAjDC,IAAKC,EAA4CF,EAA5CE,OAAQC,EAAoCH,EAApCG,QAArB,EAAyDH,EAA3BI,YAA9B,SAA4CC,EAAaL,EAAbK,SAE5C,EAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,qBAA1B,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,oBAAUF,GAAxC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAoCN,mBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KA6CE,OA3CFC,qBAAU,WACR,IAAMC,EAAU,CAAEd,UACdC,GACFc,OAAOC,OAAOF,EAAS,CACrBG,KAAMC,KAAKC,UAAUlB,GACrBmB,QAAS,CACP,eAAgB,sBAIjBlB,IACHQ,GAAW,GACXW,MAAM9B,EAAWQ,EAAKe,GACnBQ,MAAK,SAACC,GAIL,OAHKA,EAAIC,IACPhB,EAAS,cAEJe,EAAIE,UAEZH,MAAK,SAACjB,GACLC,EAAQD,GACRK,GAAW,MAEZgB,OAAM,SAACC,GACNjB,GAAW,GACXF,EAAS,GAAD,OAAImB,UAGjB,CAAC5B,EAAKC,EAAQC,EAASC,EAAMS,IAEhCE,qBAAU,WACR,GAAKV,EAEE,CACL,IAAMyB,EAAaC,aAAY,WAC7BjB,EAAckB,KAAKC,SAClB,KACH,OAAO,WACLC,cAAcJ,IANhB,OAAO,gBAWF,CAAEvB,OAAME,QAAOE,Y,eClD1B,SAASwB,IACP,IAAMC,EAAOC,qBAAWC,GAChB/B,EAASR,EAA4B,CAC3CE,IAAI,kBAAD,OAAoBmC,GACvBlC,OAAQ,QAFFK,KAIR,OACE,sBAAKgC,UAAU,mBAAf,UACI,uBAAOA,UAAU,aAAaC,YAAY,YAAYC,KAAK,SAEzD,sBAAKF,UAAU,YAAf,UACI,4CAAQhC,QAAR,IAAQA,OAAR,EAAQA,EAAMmC,KAAd,OACA,qBAAKH,UAAU,cAAcI,IAAG,OAAEpC,QAAF,IAAEA,OAAF,EAAEA,EAAMqC,OAAQC,IAAI,iB,MCZnDC,MARf,WACI,OACI,qBAAKP,UAAY,mBAAjB,SAHS,c,MCYjB,SAASQ,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,qBACpB1C,EAASR,EAA0B,CACzCE,IAAI,kBAAD,OAAoB+C,GACvB9C,OAAQ,QAFFK,KASR,OACE,qBACEgC,UAAU,wBACVW,QAAS,kBARW,SAAC3C,GACnBA,GACF0C,EAAqB1C,EAAK4C,IAMXC,CAAgB7C,IAFjC,gBAIGA,QAJH,IAIGA,OAJH,EAIGA,EAAMmC,O,MCnBb,SAASW,EAAT,GAKkB,IAJhBC,EAIe,EAJfA,SACAC,EAGe,EAHfA,gBACAC,EAEe,EAFfA,wBACAC,EACe,EADfA,eAEA,OACE,sBAAKlB,UAAU,oBAAf,UACE,yCADF,OAEGe,QAFH,IAEGA,OAFH,EAEGA,EAAUI,KAAI,SAACC,EAASC,GAAV,OACb,qBAAgBrB,UAAU,UAAU,gBAAegB,IAAkBI,EAArE,SACE,cAAC,EAAD,CACEX,OAAQW,EACRV,qBAAsBO,KAHhBI,MAOZ,qBAAKrB,UAAU,iBAAiBW,QAASO,EAAzC,+B,MClBN,SAASI,EAAT,GAIoB,IAHlBC,EAGiB,EAHjBA,QACAC,EAEiB,EAFjBA,eACAC,EACiB,EADjBA,uBAEA,OACE,sBAAKzB,UAAU,mBAAf,UACE,gDADF,OAEGuB,QAFH,IAEGA,OAFH,EAEGA,EAASJ,KAAI,SAACO,EAAQL,GAAT,OACZ,qBAAgBrB,UAAU,SAAS,gBAAewB,IAAmBE,EAArE,SACE,cAAC,EAAD,CACEjB,OAAQiB,EACRhB,qBAAsBe,KAHhBJ,S,MCClB,SAASM,EAAT,GAIoB,IAHlBC,EAGiB,EAHjBA,iBACAC,EAEiB,EAFjBA,uBACAX,EACiB,EADjBA,eAEMrB,EAAOC,qBAAWC,GAChB/B,EAASR,EAA4B,CAC3CE,IAAI,kBAAD,OAAoBmC,GACvBlC,OAAQ,MACRG,UAAU,IAHJE,KAKR,OACE,sBAAKgC,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CACEgB,gBAAiBY,EACjBb,SAAQ,OAAE/C,QAAF,IAAEA,OAAF,EAAEA,EAAM+C,SAChBE,wBAAyBY,EACzBX,eAAgBA,IAElB,cAAC,EAAD,CACEM,eAAgBI,EAChBL,QAAO,OAAEvD,QAAF,IAAEA,OAAF,EAAEA,EAAM8D,eACfL,uBAAwBI,O,kBCtBhC,SAASE,EAAT,GAAqD,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,QACjBjE,EAASR,EAA6B,CAC5CE,IAAI,wBAAD,OAA0BuE,GAC7BtE,OAAQ,QAFFK,KAIM6B,EAASrC,EAA0B,CAC/CE,IAAI,kBAAD,cAAoBM,QAApB,IAAoBA,OAApB,EAAoBA,EAAMkE,UAC7BvE,OAAQ,QAFFK,KAIR,OACE,qBAAKgC,UAAU,oBAAf,SACE,sBAAKA,UAAU,UAAU,cAAagC,KAAM,OAAKhE,QAAL,IAAKA,OAAL,EAAKA,EAAMkE,UAAvD,UACE,8BACE,qBAAKlC,UAAU,iBAAiBI,IAAG,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAMQ,OAAQC,IAAI,aAEzD,sBAAKN,UAAU,4BAAf,UACE,sBAAKA,UAAU,cAAf,iBAA8BH,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMM,KAApC,QACA,qBAAKH,UAAU,kBAAf,gBAAkChC,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAMmE,kB,kBC5BlD,SAASC,EAAT,GAA2D,IAAvCJ,EAAsC,EAAtCA,OAAQK,EAA8B,EAA9BA,SACpBC,EAAMC,uBACV,YAAuB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACFR,EAAUI,EAAWA,EAASG,QAASE,EAC7C,OAAKT,EAIH,qBAAKQ,MAAOA,EAAZ,SACIR,EACA,cAAC,EAAD,CAASD,OAAQA,EAAQC,QAASA,IADzB,OAJL,OAUZ,CAACI,EAAUL,IAGb,OACE,qBAAKhC,UAAU,sBAAf,SACE,cAAC,IAAD,CACE2C,OAAQ,IACRC,MAAO,IACPC,SAAU,IACVC,UAAWT,EAAWA,EAASU,OAAS,EAJ1C,SAMGT,M,2BCjCHU,EAAc,SAAIC,GACtB,MAA8BlF,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwBN,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,qBAA1B,mBAAOG,EAAP,KAAcC,EAAd,KAqBA,MAAO,CAAE+E,OAnBG,uCAAG,WAAOlF,GAAP,SAAAmF,EAAA,sDACb9E,GAAW,GACX4E,EAAiBjF,GACdiB,MAAK,SAACC,GAIL,OAHKA,EAAIC,IACPhB,EAAS,cAEJe,EAAIE,UAEZH,MAAK,SAACjB,GACLC,EAAQD,GACRK,GAAW,MAEZgB,OAAM,SAACC,GACNjB,GAAW,GACXF,EAAS,GAAD,OAAImB,OAfH,2CAAH,sDAmBKtB,OAAMI,UAASF,UCzB5BkF,EAAmB,SAACpF,EAAMN,GAC5B,IAAMe,ECHY,SAACT,GAQnB,MAPgB,CACdL,OAAQ,OACRiB,KAAMC,KAAKC,UAAUd,GACrBe,QAAS,CACP,eAAgB,qBDFJsE,CAAcrF,GAC9B,OAAOgB,MAAMtB,EAAKe,IECdvB,G,MAAaK,EAAQ,GAArBL,UAsBR,SAASoG,EAAT,GAAgE,IAA1CtB,EAAyC,EAAzCA,OAAQuB,EAAiC,EAAjCA,aAC5B,EAAoCxF,mBAAS,IAA7C,mBAAOyF,EAAP,KAAmBC,EAAnB,KAEgBC,EAAkBV,GAAgC,SAAChF,GACjE,IAAMN,EAAG,UAAMR,EAAN,WACT,OAAOkG,EAAiBpF,EAAMN,MAFxBwF,OAKQS,EAAeX,GAA6B,SAAChF,GAC3D,IAAMN,EAAG,UAAMR,EAAN,WACT,OAAOkG,EAAiBpF,EAAMN,MAFxBwF,OA8BR,OACE,sBAAKlD,UAAU,uBAAf,UACE,0BACEA,UAAU,mBACVC,YAAY,kBACZ2D,MAAOJ,EACPK,SA/BmB,SACvBC,GAEA,IAAQF,EAAUE,EAAEC,OAAZH,MACRH,EAAcG,MA6BZ,wBACEI,SAAyB,KAAfR,EACVxD,UAAU,qBACVW,QA7BoB,WACxB,IAAMsD,EAAkBxE,KAAKC,MAAMwE,WAC7BC,EAAiB,CACrBvD,GAAIqD,EACJ/B,SAAUF,EACVG,QAASqB,EACTY,UAAW3E,KAAKC,MAAMwE,YAExBR,EAAcS,GAMdR,EAJoB,CAClBlD,OAAQ8C,EACRc,UAAWJ,IAGbR,EAAc,KAWZ,qB,MCjEN,SAASa,EAAT,GAIqB,IAHnBC,EAGkB,EAHlBA,WACArE,EAEkB,EAFlBA,KACAgB,EACkB,EADlBA,eAEA,OACE,sBAAKlB,UAAU,wBAAf,UACGuE,EACS,MAATrE,GACC,wBAAQF,UAAU,qBAAqBW,QAASO,EAAhD,kB,WCER,SAASsD,EAAT,GAIuB,IAHrBC,EAGoB,EAHpBA,WACAhE,EAEoB,EAFpBA,OACAiE,EACoB,EADpBA,gBAEA,EAAwB3G,mBAAS,IAAjC,mBAAO8B,EAAP,KAAa8E,EAAb,KACgBhB,EAAeX,GAA6B,SAAChF,GAC3D,IAAMN,EAAG,UAAMR,WAAN,gBACT,OAAOkG,EAAiBpF,EAAMN,MAFxBwF,OAIQ0B,EAAe5B,GAA6B,SAAChF,GAC3D,IAAMN,EAAG,UAAMR,WAAN,QACT,OAAOkG,EAAiBpF,EAAMN,MAFxBwF,OAkBR,OACE,mCACGuB,GACC,qBAAKzE,UAAU,UAAf,SACE,sBAAKA,UAAU,OAAf,UACE,iDACA,uBAAOA,UAAU,aAAjB,0BACA,uBACEA,UAAU,aACV4D,MAAO/D,EACPI,YAAY,aACZ4D,SAzBQ,SAACC,GACnB,IAAQF,EAAUE,EAAEC,OAAZH,MACRe,EAAQf,IAwBEiB,UAAQ,IAEV,wBAAQ7E,UAAU,oBAAoBW,QAAS+D,EAA/C,eAGA,wBAAQ1E,UAAU,qBAAqBW,QA3B5B,WACnB+D,IACA,IAAMI,EAAmB,CACvBrE,OAAQA,EACRsE,OAAQlF,GAEV8D,EAAWmB,GACXF,EAAWE,IAoBH,wBC9DZ,IAAME,EAAW,WACb,MAAsCjH,oBAAS,GAA/C,mBAAOkH,EAAP,KAAoBC,EAApB,KAIA,MAAO,CAAED,cAAaE,iBAHG5C,uBAAY,WACjC2C,GAAe,SAAAE,GAAc,OAAKA,OACnC,M,MCgBP,SAASC,EAAT,GAAoD,IAAhC9B,EAA+B,EAA/BA,aACZvB,EAASlC,qBAAWC,GAClB/B,EAASR,EAA0B,CACzCE,IAAI,kBAAD,OAAoB6F,GACvB5F,OAAQ,MACRG,UAAU,IAHJE,KAMR,EAGIgH,IAFWM,EADf,EACEL,YACkBM,EAFpB,EAEEJ,iBAGIK,GAAkB,OAAJxH,QAAI,IAAJA,OAAA,EAAAA,EAAMqE,UAAN,mBAAqBrE,QAArB,IAAqBA,OAArB,EAAqBA,EAAMqE,UAAY,GAG3D,OAFAmD,EAAYC,UAGV,sBAAKzF,UAAU,YAAf,UACE,cAAC,EAAD,CACEuE,WAAU,OAAEvG,QAAF,IAAEA,OAAF,EAAEA,EAAMmC,KAClBD,KAAI,OAAElC,QAAF,IAAEA,OAAF,EAAEA,EAAMkC,KACZgB,eAAgBqE,IAGlB,cAAC,EAAD,CAAUvD,OAAQA,EAAQK,SAAUmD,IAEpC,cAAC,EAAD,CAAYxD,OAAQA,EAAQuB,aAAcA,IAE1C,cAACiB,EAAD,CACE/D,OAAQ8C,EACRkB,WAAYa,EACZZ,gBAAiBa,O,MClCzB,SAASG,EAAT,GAAkE,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,QAChC,EAAgC7H,mBAAS,IAAzC,mBAAO8H,EAAP,KAAiBC,EAAjB,KACA,EAA0B/H,mBAAS,IAAnC,mBAAOgI,EAAP,KAAcC,EAAd,KAEgBrC,EAAeX,GAA6B,SAAChF,GAC3D,IAAMN,EAAG,UAAMR,WAAN,YACT,OAAOkG,EAAiBpF,EAAMN,MAFxBwF,OAKQ0B,EAAe5B,GAA6B,SAAChF,GAC3D,IAAMN,EAAG,UAAMR,WAAN,QACT,OAAOkG,EAAiBpF,EAAMN,MAFxBwF,OAoCR,OACE,mCACIyC,EACA,qBAAK3F,UAAU,UAAf,SACE,sBAAKA,UAAU,OAAf,UACE,kDACA,uBAAOA,UAAU,aAAjB,oBACA,uBACEA,UAAU,aACVC,YAAY,eACZ2D,MAAOiC,EACPhC,SAAW,SAACC,GAAD,OA1CA,SAACA,GACtB,IAAQF,EAAUE,EAAEC,OAAZH,MACRkC,EAAYlC,GAwCgBqC,CAAenC,IACjC3D,KAAK,OACL0E,UAAQ,IAEV,uBAAO7E,UAAU,aAAjB,uBACA,uBACEA,UAAU,aACVC,YAAY,eACZ2D,MAAOmC,EACPlC,SAAU,SAACC,GAAD,OA9CF,SAACA,GACnB,IAAQF,EAAUE,EAAEC,OAAZH,MACRoC,EAASpC,GA4CkBsC,CAAYpC,IAC7Be,UAAQ,IAEV,wBAAQ7E,UAAU,oBAAoBW,QAASiF,EAA/C,eAGA,wBACE5F,UAAU,qBACVW,QAjDa,WACvBiF,IACA,IAAMO,EAAWJ,EAAMK,MAAM,KACvBC,EAAY5G,KAAKC,MAAMwE,WACvBoC,EAAc,CAClB1F,GAAIyF,EACJlG,KAAM0F,EACNd,OAAQoB,EACR9D,SAAU,GACVnC,KAAM,KAERiG,EAASI,SAAQ,SAAC1G,GAChB,IAAM2G,EAAc,CAClB/F,OAAQ4F,EACRtB,OAAQlF,GAEV4G,QAAQC,IAAIF,GACZ5B,EAAW4B,MAEb7C,EAAW2C,IA4BH,yBAxBK,O,MC3DjB,SAASK,IACP,MAA4C5I,mBAAS,IAArD,mBAAO6I,EAAP,KAAuBC,EAAvB,KACA,EAGI7B,IAFW8B,EADf,EACE7B,YACkB8B,EAFpB,EAEE5B,iBAGIzE,EAAuB6B,uBAAY,SAACgB,GACxCsD,EAAkBtD,KACjB,IAEH,OACE,sBAAKvD,UAAU,iBAAf,UACE,cAAC,EAAD,CACE4B,iBAAkBgF,EAClB/E,uBAAwBnB,EACxBQ,eAAgB6F,IAElB,cAAC,EAAD,CAAUxD,aAAcqD,IACxB,cAAC,EAAD,CAAgBjB,OAAQmB,EAAsBlB,QAASmB,OCtB7D,IAAMlH,EAAOmH,OAAO,sBACdjH,EAAckH,IAAMC,cAA6B,IAEvD,SAASC,IACP,OACE,eAACpH,EAAYqH,SAAb,CAAsBxD,MAAO/D,EAA7B,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OCTN,IAYewH,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtI,MAAK,YAAkD,IAA/CuI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFa,SAASC,eAAe,SAE1BZ,M","file":"static/js/main.e06a64dc.chunk.js","sourcesContent":["const ROOT_URL = \"http://localhost:3131/\";\nconst MESSAGE_FILE =\n  \"/Users/rahul/Desktop/Practice/dummy-chat/src/Server/message.json\";\nconst USER_FILE =\n    \"/Users/rahul/Desktop/Practice/dummy-chat/src/Server/user.json\";\nconst CHAT_FILE = \"/Users/rahul/Desktop/Practice/dummy-chat/src/Server/chat.json\";\nconst BASE_URL = \"http://localhost:3001\";\nmodule.exports = { ROOT_URL, MESSAGE_FILE, USER_FILE, CHAT_FILE ,BASE_URL };\n","import { useState, useEffect } from \"react\";\nconst {ROOT_URL} = require(\"../constants\");\n\ntype queryParam = {\n  url: string;\n  method: string;\n  payload?: Object;\n  interval?: boolean;\n  skip?: boolean;\n};\n\nconst useQuery = <T>(param: queryParam) => {\n  const { url, method, payload, skip = false, interval } = param;\n  \n  const [data, setData] = useState<T | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [loading, setLoading] = useState(!skip);\n  const [queryCount, setQueryCount] = useState(0);\n\n  useEffect(() => {\n    const options = { method };\n    if (payload) {\n      Object.assign(options, {\n        body: JSON.stringify(payload),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n    }\n    if (!skip) {\n      setLoading(true);\n      fetch(ROOT_URL + url, options)\n        .then((res) => {\n          if (!res.ok) {\n            setError(\"Some Error\");\n          }\n          return res.json();\n        })\n        .then((data) => {\n          setData(data);\n          setLoading(false);\n        })\n        .catch((err) => {\n          setLoading(false);\n          setError(`${err}`);\n        });\n    }\n  }, [url, method, payload, skip, queryCount]);\n\n  useEffect(() => {\n    if (!interval) {\n      return () => { };\n    } else {\n      const queryTimer = setInterval(() => {\n        setQueryCount(Date.now());\n      }, 500);\n      return () => {\n        clearInterval(queryTimer);\n      }\n    }\n  });\n    \n    return { data, error, loading };\n};\n\nexport { useQuery };\n","import React, { useContext } from \"react\";\nimport { UserContext } from \"../../App\";\nimport { useQuery } from \"../../Hooks/useQuery\";\nimport \"./Header.css\";\n\ninterface userSubscriptions {\n  id: string;\n  name: string;\n  directMessages: string[];\n  channels: string[];\n  avatar: string;\n}\nfunction Header() {\n  const user = useContext(UserContext);\n  const { data } = useQuery<userSubscriptions>({\n    url: `user/id?userId=${user}`,\n    method: \"GET\",\n  });\n  return (\n    <div className=\"Header-container\">\n        <input className=\"Search-box\" placeholder=\"Search...\" type=\"text\" />\n      \n          <div className=\"user-name\">\n              <span> {data?.name } </span> \n              <img className=\"User-avatar\" src={data?.avatar} alt=\"AVATAR\" />\n      </div>\n    </div>\n  );\n}\n\nexport { Header };\n","import React from 'react'\nimport \"./SideHeader.css\"\n\nconst ORG_NAME = \"Sprinklr\";\nfunction SideHeader() {\n    return (\n        <div className = \"header-container\">\n            { ORG_NAME }\n        </div>\n    )\n}\n\nexport default SideHeader\n","import React from \"react\";\nimport { useQuery } from \"../../../../Hooks/useQuery\";\nimport \"./ChatOption.css\";\n\ninterface chatOptionProps {\n  chatId: string;\n  handleSelectedChatId: (chatId: string) => void;\n}\ntype chatInformation = {\n  id: string;\n  name: string;\n  userId: string[];\n  messages: string[];\n  type: string;\n};\nfunction ChatOption({ chatId, handleSelectedChatId }: chatOptionProps) {\n  const { data } = useQuery<chatInformation>({\n    url: `chat/id?chatId=${chatId}`,\n    method: \"GET\",\n  });\n  const handleSelection = (data: chatInformation | undefined): void => {\n    if (data) {\n      handleSelectedChatId(data.id);\n    }\n  };\n  return (\n    <div\n      className=\"chat-option-container\"\n      onClick={() => handleSelection(data)}\n    >\n      {data?.name}\n    </div>\n  );\n}\n\nexport { ChatOption };\n","import React from \"react\";\nimport { ChatOption } from \"../ChatOption/ChatOption\";\nimport \"./Channels.css\";\n\ninterface channelProps {\n  channels: string[] | undefined;\n  SelectedChannel: string;\n  handleSelectedChannelId: (chatId: string) => void;\n  handleFormOpen: () => void;\n}\n\nfunction Channels({\n  channels,\n  SelectedChannel,\n  handleSelectedChannelId,\n  handleFormOpen\n}: channelProps) {\n  return (\n    <div className=\"channel-container\">\n      <b>Channels</b>\n      {channels?.map((channel, indx) => (\n        <div key={indx} className=\"channel\" data-selected={SelectedChannel===channel}>\n          <ChatOption\n            chatId={channel}\n            handleSelectedChatId={handleSelectedChannelId}\n          />\n        </div>\n      ))}\n      <div className=\"channel-button\" onClick={handleFormOpen} > Add channels </div>\n    </div>\n  );\n}\n\nexport {Channels};\n","import React from \"react\";\nimport { ChatOption } from \"../ChatOption/ChatOption\";\nimport \"./FriendList.css\";\n\ninterface friendListPros {\n  friends: string[] | undefined;\n  SelectedFriend: string;\n  handleSelectedFriendId: (chatId: string) => void;\n}\n\nfunction FriendList({\n  friends,\n  SelectedFriend,\n  handleSelectedFriendId\n}: friendListPros) {\n  return (\n    <div className=\"friend-container\">\n      <b>Direct Messages</b>\n      {friends?.map((friend, indx) => (\n        <div key={indx} className=\"friend\" data-selected={SelectedFriend === friend}>\n          <ChatOption\n            chatId={friend}\n            handleSelectedChatId={handleSelectedFriendId}\n          />\n        </div>\n      )     )}\n    </div>\n  );\n}\n\nexport {FriendList};\n","import React, { useContext } from \"react\";\nimport SideHeader from \"./SideHeader/SideHeader\";\nimport {Channels} from \"./Channels/Channels\";\nimport {FriendList} from \"./FriendList/FriendList\";\nimport { useQuery } from \"../../../Hooks/useQuery\";\nimport { UserContext } from \"../../../App\";\nimport \"./Sidepanel.css\";\n\ninterface sidePanelProps {\n  selectedListItem: string;\n  handleSelectedListItem: (chatId: string) => void;\n  handleFormOpen: () => void;\n}\ninterface userSubscriptions {\n  id: string;\n  name: string;\n  directMessages: string[];\n  channels: string[];\n  avatar: string;\n}\nfunction Sidepanel({\n  selectedListItem,\n  handleSelectedListItem,\n  handleFormOpen\n}: sidePanelProps) {\n  const user = useContext(UserContext);\n  const { data } = useQuery<userSubscriptions>({\n    url: `user/id?userId=${user}`,\n    method: \"GET\",\n    interval: true,\n  });\n  return (\n    <div className=\"container\">\n      <SideHeader />\n      <Channels\n        SelectedChannel={selectedListItem}\n        channels={data?.channels}\n        handleSelectedChannelId={handleSelectedListItem}\n        handleFormOpen={handleFormOpen}\n      />\n      <FriendList\n        SelectedFriend={selectedListItem}\n        friends={data?.directMessages}\n        handleSelectedFriendId={handleSelectedListItem}\n      />\n    </div>\n  );\n}\n\nexport { Sidepanel };\n","import React from \"react\";\nimport { useQuery } from \"../../../../../Hooks/useQuery\";\nimport \"./Message.css\";\n\ninterface messageProps {\n  sender: string | null;\n  message: string;\n}\ntype messageInformation = {\n  id: string;\n  senderId: string;\n  content: string;\n  timeStamp: string;\n};\ntype userInformation = {\n  id: string;\n  name: string;\n  channels: string[];\n  directMessages: string[];\n  avatar: string;\n};\nfunction Message({ sender, message }: messageProps) {\n  const { data } = useQuery<messageInformation>({\n    url: `message/id?messageId=${message}`,\n    method: \"GET\",\n  });\n  const { data: user } = useQuery<userInformation>({\n    url: `user/id?userId=${data?.senderId}`,\n    method: \"GET\",\n  });\n  return (\n    <div className=\"Message-container\">\n      <div className=\"message\" data-sender={sender === data?.senderId}>\n        <div>\n          <img className=\"message-avatar\" src={user?.avatar} alt=\"avatar\" />\n        </div>\n        <div className=\"message-content-container\">\n          <div className=\"sender-name\">{user?.name} :</div>\n          <div className=\"message-content\">{data?.content}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { Message };\n","import React, { useCallback } from \"react\";\nimport { Message } from \"./Message/Message\";\nimport { FixedSizeList } from \"react-window\";\nimport \"./ChatBody.css\";\n\ninterface messageBodyProps {\n  sender: string | null;\n  messages: string[] | undefined;\n}\n\nfunction ChatBody({ sender, messages }: messageBodyProps) {\n  const Row = useCallback(\n    ({ index, style }) => {\n      const message = messages ? messages[index] : undefined;\n      if (!message) {\n        return (null);\n      }\n      return (\n        <div style={style}>\n          {!message? null : (\n            <Message sender={sender} message={message} />\n          )}\n        </div>\n      );\n    },\n    [messages, sender]\n  );\n\n  return (\n    <div className=\"chat-body-container\">\n      <FixedSizeList\n        height={1000}\n        width={600}\n        itemSize={150}\n        itemCount={messages ? messages.length : 0}\n      >\n        {Row}\n      </FixedSizeList>\n    </div>\n  );\n}\n\nexport { ChatBody };\n","import { useState } from \"react\";\ntype functionType = (...args: any[]) => Promise<Response>;\n\nconst useMutation = <T>(mutationFunction: functionType) => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<T | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const mutate = async (data: any) => {\n    setLoading(true);\n    mutationFunction(data)\n      .then((res) => {\n        if (!res.ok) {\n          setError(\"Some Error\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setLoading(false);\n        setError(`${err}`);\n      });\n  };\n\n  return { mutate, data, loading, error };\n};\n\nexport { useMutation };\n","import { createOptions } from \"./createOptions\";\n\nconst mutationCallback = (data, url) => {\n    const options = createOptions(data);\n    return fetch(url, options);\n}\n\nexport { mutationCallback };","const createOptions = (data) => {\n    const options = {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    return options;\n}\n\nexport { createOptions };","import React, { useState } from \"react\";\nimport { useMutation } from \"../../../../Hooks/useMutation\";\nimport { mutationCallback } from \"../../../Util/mutationCallback\";\nimport \"./MessageBox.css\";\n\nconst { ROOT_URL } = require(\"../../../../constants\");\n\ninterface MessageBoxProps {\n  sender: string | null;\n  activeChatId: string;\n}\n\ntype messageInformation = {\n  id: string;\n  senderId: string;\n  content: string;\n  timeStamp: string;\n};\n\ntype chatInformation = {\n  id: string;\n  name: string;\n  userId: string[];\n  messages: string[];\n  type: string;\n};\n\nfunction MessageBox({ sender, activeChatId }: MessageBoxProps) {\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const { mutate: mutateMessage } = useMutation<messageInformation>((data) => {\n    const url = `${ROOT_URL}message`;\n    return mutationCallback(data, url);\n  });\n\n  const { mutate: mutateChat } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}chat/id`;\n    return mutationCallback(data, url);\n  });\n\n  const handleNewMessage = (\n    e: React.ChangeEvent<HTMLTextAreaElement>\n  ): void => {\n    const { value } = e.target;\n    setNewMessage(value);\n  };\n\n  const handleMessageSend = (): void => {\n    const uniqueMessageId = Date.now().toString();\n    const messagePayload = {\n      id: uniqueMessageId,\n      senderId: sender,\n      content: newMessage,\n      timeStamp: Date.now().toString(),\n    };\n    mutateMessage(messagePayload);\n\n    const chatPayload = {\n      chatId: activeChatId,\n      messageId: uniqueMessageId,\n    };\n    mutateChat(chatPayload);\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"MessageBox-container\">\n      <textarea\n        className=\"MessageBox-input\"\n        placeholder=\"Type Message...\"\n        value={newMessage}\n        onChange={handleNewMessage}\n      />\n      <button\n        disabled={newMessage === \"\"}\n        className=\"message-box-button\"\n        onClick={handleMessageSend}\n      >\n        Send\n      </button>\n    </div>\n  );\n}\n\nexport { MessageBox };","import React from \"react\";\nimport \"./ChatHeader.css\";\n\ninterface ChatHeaderProps {\n  activeChat: string | undefined;\n  type: string | undefined;\n  handleFormOpen: () => void;\n}\nfunction ChatHeader({\n  activeChat,\n  type,\n  handleFormOpen,\n}: ChatHeaderProps) {\n  return (\n    <div className=\"chat-header-container\">\n      {activeChat}\n      {type === \"2\" && (\n        <button className=\"Add-channel-button\" onClick={handleFormOpen}>\n          +\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport { ChatHeader };\n","import React, { useState } from \"react\";\nimport { ROOT_URL } from \"../../../../constants\";\nimport { useMutation } from \"../../../../Hooks/useMutation\";\nimport { mutationCallback } from \"../../../Util/mutationCallback\";\n\ninterface newMemberFormProp {\n  isFormOpen: boolean;\n  chatId: string;\n  handleFormClose: () => void;\n}\n\ntype chatInformation = {\n  id: string;\n  name: string;\n  userID: string[];\n  messages: string[];\n  type: string;\n};\n\nfunction NewMemberForm({\n  isFormOpen,\n  chatId,\n  handleFormClose,\n}: newMemberFormProp) {\n  const [user, setUser] = useState(\"\");\n  const { mutate: mutateChat } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}chat/newUser`;\n    return mutationCallback(data, url);\n  });\n  const { mutate: mutateUser } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}user`;\n    return mutationCallback(data, url);\n  });\n  const handleUsers = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setUser(value);\n  };\n  const addNewMember = () => {\n    handleFormClose();\n    const newMemberPayload = {\n      chatId: chatId,\n      userId: user,\n    };\n    mutateChat(newMemberPayload);\n    mutateUser(newMemberPayload);\n  };\n\n  return (\n    <>\n      {isFormOpen && (\n        <div className=\"overlay\">\n          <div className=\"form\">\n            <h2>Add new member!</h2>\n            <label className=\"form-label\"> New Member </label>\n            <input\n              className=\"form-input\"\n              value={user}\n              placeholder=\"New Member\"\n              onChange={handleUsers}\n              required\n            />\n            <button className=\"form-button-close\" onClick={handleFormClose}>\n              X\n            </button>\n            <button className=\"form-button-create\" onClick={addNewMember}>\n              Add\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport { NewMemberForm };\n","import { useState, useCallback } from 'react';\n\nconst useModal = () => {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const toggleModalState = useCallback(() => {\n        setIsModalOpen(prevModalState => !prevModalState);\n    }, []);\n    return { isModalOpen, toggleModalState };\n}\nexport { useModal };","import React, { useContext } from \"react\";\nimport { ChatBody } from \"./ChatBody/ChatBody\";\nimport { MessageBox } from \"./MessageBox/MessageBox\";\nimport { ChatHeader } from \"./ChatHeader/ChatHeader\";\nimport { useQuery } from \"../../../Hooks/useQuery\";\nimport { UserContext } from \"../../../App\";\nimport { NewMemberForm } from \"./NewMemberForm/NewMemberForm\";\nimport { useModal } from \"../../../Hooks/useModal\";\nimport \"./ChatArea.css\";\n\ninterface chatAreaProps {\n  activeChatId: string;\n}\n\ntype chatInformation = {\n  id: string;\n  name: string;\n  userId: string[];\n  messages: string[];\n  type: string;\n};\n\nfunction ChatArea({ activeChatId }: chatAreaProps) {\n  const sender = useContext(UserContext);\n  const { data } = useQuery<chatInformation>({\n    url: `chat/id?chatId=${activeChatId}`,\n    method: \"GET\",\n    interval: true\n  });\n\n  const {\n    isModalOpen: isNewMemberFormOpen,\n    toggleModalState: toggleNewMemberForm,\n  } = useModal();\n\n  const messageList = data?.messages ? [...data?.messages] : [];\n  messageList.reverse();\n\n  return (\n    <div className=\"chat-area\">\n      <ChatHeader\n        activeChat={data?.name}\n        type={data?.type}\n        handleFormOpen={toggleNewMemberForm}\n      />\n\n      <ChatBody sender={sender} messages={messageList} />\n\n      <MessageBox sender={sender} activeChatId={activeChatId} />\n\n      <NewMemberForm\n        chatId={activeChatId}\n        isFormOpen={isNewMemberFormOpen}\n        handleFormClose={toggleNewMemberForm}\n      />\n    </div>\n  );\n}\n\nexport { ChatArea };\n","import React, { useState } from \"react\";\nimport { ROOT_URL } from \"../../../constants\";\nimport { useMutation } from \"../../../Hooks/useMutation\";\nimport { mutationCallback } from \"../../Util/mutationCallback\";\nimport \"./NewChannelForm.css\";\n\ntype newChannelFormProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype chatInformation = {\n  id: string;\n  name: string;\n  userID: string[];\n  messages: string[];\n  type: string;\n};\n\nfunction NewChannelForm({ isOpen, onClose}: newChannelFormProps) {\n  const [chatName, setChatName] = useState(\"\");\n  const [users, setUsers] = useState(\"\");\n\n  const { mutate: mutateChat } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}chat/new`;\n    return mutationCallback(data, url);\n  });\n\n  const { mutate: mutateUser } = useMutation<chatInformation>((data) => {\n    const url = `${ROOT_URL}user`;\n    return mutationCallback(data, url);\n  });\n\n  const handleChatName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setChatName(value);\n  };\n\n  const handleUsers = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setUsers(value);\n  };\n\n  const createNewChannel = () => {\n    onClose();\n    const userList = users.split(\",\");\n    const newChatId = Date.now().toString();\n    const chatPayload = {\n      id: newChatId,\n      name: chatName,\n      userId: userList,\n      messages: [],\n      type: \"2\",\n    };\n    userList.forEach((user) => {\n      const userPayload = {\n        chatId: newChatId,\n        userId: user,\n      };\n      console.log(userPayload);\n      mutateUser(userPayload);\n    });\n    mutateChat(chatPayload);\n  }\n  return (\n    <>\n      {!isOpen ? null : (\n        <div className=\"overlay\">\n          <div className=\"form\">\n            <h2>Create a channel</h2>\n            <label className=\"form-label\"> Name </label>\n            <input\n              className=\"form-input\"\n              placeholder=\"Channel-Name\"\n              value={chatName}\n              onChange={ (e) => handleChatName(e)}\n              name=\"name\"\n              required\n            />\n            <label className=\"form-label\"> Members </label>\n            <input\n              className=\"form-input\"\n              placeholder=\"Members-List\"\n              value={users}\n              onChange={(e) => handleUsers(e)}\n              required\n            />\n            <button className=\"form-button-close\" onClick={onClose}>\n              X\n            </button>\n            <button\n              className=\"form-button-create\"\n              onClick={createNewChannel}\n            >\n              Create\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport { NewChannelForm };\n","import React, { useState, useCallback } from \"react\";\nimport { Sidepanel } from \"./Sidepanel/Sidepanel\";\nimport { ChatArea } from \"./ChatArea/ChatArea\";\nimport { NewChannelForm } from \"./NewChannelForm/NewChannelForm\";\nimport { useModal } from \"../../Hooks/useModal\";\nimport \"./Body.css\";\n\nfunction Body() {\n  const [selectedChatId, setSelectedChatId] = useState(\"\");\n  const {\n    isModalOpen: isNewChannelFormOpen,\n    toggleModalState: toggleNewChannelForm,\n  } = useModal();\n\n  const handleSelectedChatId = useCallback((activeChatId: string): void => {\n    setSelectedChatId(activeChatId);\n  }, []);\n\n  return (\n    <div className=\"Body-container\">\n      <Sidepanel\n        selectedListItem={selectedChatId}\n        handleSelectedListItem={handleSelectedChatId}\n        handleFormOpen={toggleNewChannelForm}\n      />\n      <ChatArea activeChatId={selectedChatId} />\n      <NewChannelForm isOpen={isNewChannelFormOpen} onClose={toggleNewChannelForm} />\n    </div>\n  );\n}\n\nexport { Body };\n","import React from \"react\";\nimport { Header } from \"./Components/Header/Header\";\nimport { Body } from \"./Components/Body/Body\";\n\nconst user = prompt(\"Enter name to join\");\nconst UserContext = React.createContext<string | null>(\"\");\n\nfunction App() {\n  return (\n    <UserContext.Provider value={user}>\n      <Header />\n      <Body />\n    </UserContext.Provider>\n  );\n}\n\nexport { App, UserContext };\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}